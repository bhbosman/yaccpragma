// Code generated by goyacc -o ./yaccpragma.y.go -p YaccPragma ./yaccpragma.y. DO NOT EDIT.

//line ./yaccpragma.y:2
package yaccpragma

import __yyfmt__ "fmt"

//line ./yaccpragma.y:2
import yaccpragmaids "github.com/bhbosman/yaccpragmaids"
import "fmt"

//line ./yaccpragma.y:16
type YaccPragmaSymType struct {
	yys           int
	StringLiteral string
	IntLiteral    int64
}

const RwPragma = 57346
const RwPrefix = 57347
const RwId = 57348
const RwVersion = 57349
const StringLiteral = 57350
const WhiteSpace = 57351
const Identifier = 57352
const IntLiteral = 57353

var YaccPragmaToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"RwPragma",
	"RwPrefix",
	"RwId",
	"RwVersion",
	"StringLiteral",
	"WhiteSpace",
	"Identifier",
	"IntLiteral",
	"'.'",
}
var YaccPragmaStatenames = [...]string{}

const YaccPragmaEofCode = 1
const YaccPragmaErrCode = 2
const YaccPragmaInitialStackSize = 16

//line ./yaccpragma.y:68

//line yacctab:1
var YaccPragmaExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const YaccPragmaPrivate = 57344

const YaccPragmaLast = 12

var YaccPragmaAct = [...]int{

	11, 12, 10, 8, 6, 4, 3, 5, 2, 9,
	7, 1,
}
var YaccPragmaPact = [...]int{

	4, -1000, 0, -6, 2, -7, 1, -1000, -9, -1000,
	-12, -10, -1000,
}
var YaccPragmaPgo = [...]int{

	0, 11,
}
var YaccPragmaR1 = [...]int{

	0, 1, 1, 1,
}
var YaccPragmaR2 = [...]int{

	0, 4, 3, 6,
}
var YaccPragmaChk = [...]int{

	-1000, -1, 4, 6, 5, 7, 10, 8, 10, 8,
	11, 12, 11,
}
var YaccPragmaDef = [...]int{

	0, -2, 0, 0, 0, 0, 0, 2, 0, 1,
	0, 0, 3,
}
var YaccPragmaTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 12,
}
var YaccPragmaTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
}
var YaccPragmaTok3 = [...]int{
	0,
}

var YaccPragmaErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	YaccPragmaDebug        = 0
	YaccPragmaErrorVerbose = false
)

type YaccPragmaLexer interface {
	Lex(lval *YaccPragmaSymType) int
	Error(s string)
}

type YaccPragmaParser interface {
	Parse(YaccPragmaLexer) int
	Lookahead() int
}

type YaccPragmaParserImpl struct {
	lval  YaccPragmaSymType
	stack [YaccPragmaInitialStackSize]YaccPragmaSymType
	char  int
}

func (p *YaccPragmaParserImpl) Lookahead() int {
	return p.char
}

func YaccPragmaNewParser() YaccPragmaParser {
	return &YaccPragmaParserImpl{}
}

const YaccPragmaFlag = -1000

func YaccPragmaTokname(c int) string {
	if c >= 1 && c-1 < len(YaccPragmaToknames) {
		if YaccPragmaToknames[c-1] != "" {
			return YaccPragmaToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func YaccPragmaStatname(s int) string {
	if s >= 0 && s < len(YaccPragmaStatenames) {
		if YaccPragmaStatenames[s] != "" {
			return YaccPragmaStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func YaccPragmaErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !YaccPragmaErrorVerbose {
		return "syntax error"
	}

	for _, e := range YaccPragmaErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + YaccPragmaTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := YaccPragmaPact[state]
	for tok := TOKSTART; tok-1 < len(YaccPragmaToknames); tok++ {
		if n := base + tok; n >= 0 && n < YaccPragmaLast && YaccPragmaChk[YaccPragmaAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if YaccPragmaDef[state] == -2 {
		i := 0
		for YaccPragmaExca[i] != -1 || YaccPragmaExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; YaccPragmaExca[i] >= 0; i += 2 {
			tok := YaccPragmaExca[i]
			if tok < TOKSTART || YaccPragmaExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if YaccPragmaExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += YaccPragmaTokname(tok)
	}
	return res
}

func YaccPragmalex1(lex YaccPragmaLexer, lval *YaccPragmaSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = YaccPragmaTok1[0]
		goto out
	}
	if char < len(YaccPragmaTok1) {
		token = YaccPragmaTok1[char]
		goto out
	}
	if char >= YaccPragmaPrivate {
		if char < YaccPragmaPrivate+len(YaccPragmaTok2) {
			token = YaccPragmaTok2[char-YaccPragmaPrivate]
			goto out
		}
	}
	for i := 0; i < len(YaccPragmaTok3); i += 2 {
		token = YaccPragmaTok3[i+0]
		if token == char {
			token = YaccPragmaTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = YaccPragmaTok2[1] /* unknown char */
	}
	if YaccPragmaDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", YaccPragmaTokname(token), uint(char))
	}
	return char, token
}

func YaccPragmaParse(YaccPragmalex YaccPragmaLexer) int {
	return YaccPragmaNewParser().Parse(YaccPragmalex)
}

func (YaccPragmarcvr *YaccPragmaParserImpl) Parse(YaccPragmalex YaccPragmaLexer) int {
	var YaccPragman int
	var YaccPragmaVAL YaccPragmaSymType
	var YaccPragmaDollar []YaccPragmaSymType
	_ = YaccPragmaDollar // silence set and not used
	YaccPragmaS := YaccPragmarcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	YaccPragmastate := 0
	YaccPragmarcvr.char = -1
	YaccPragmatoken := -1 // YaccPragmarcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		YaccPragmastate = -1
		YaccPragmarcvr.char = -1
		YaccPragmatoken = -1
	}()
	YaccPragmap := -1
	goto YaccPragmastack

ret0:
	return 0

ret1:
	return 1

YaccPragmastack:
	/* put a state and value onto the stack */
	if YaccPragmaDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", YaccPragmaTokname(YaccPragmatoken), YaccPragmaStatname(YaccPragmastate))
	}

	YaccPragmap++
	if YaccPragmap >= len(YaccPragmaS) {
		nyys := make([]YaccPragmaSymType, len(YaccPragmaS)*2)
		copy(nyys, YaccPragmaS)
		YaccPragmaS = nyys
	}
	YaccPragmaS[YaccPragmap] = YaccPragmaVAL
	YaccPragmaS[YaccPragmap].yys = YaccPragmastate

YaccPragmanewstate:
	YaccPragman = YaccPragmaPact[YaccPragmastate]
	if YaccPragman <= YaccPragmaFlag {
		goto YaccPragmadefault /* simple state */
	}
	if YaccPragmarcvr.char < 0 {
		YaccPragmarcvr.char, YaccPragmatoken = YaccPragmalex1(YaccPragmalex, &YaccPragmarcvr.lval)
	}
	YaccPragman += YaccPragmatoken
	if YaccPragman < 0 || YaccPragman >= YaccPragmaLast {
		goto YaccPragmadefault
	}
	YaccPragman = YaccPragmaAct[YaccPragman]
	if YaccPragmaChk[YaccPragman] == YaccPragmatoken { /* valid shift */
		YaccPragmarcvr.char = -1
		YaccPragmatoken = -1
		YaccPragmaVAL = YaccPragmarcvr.lval
		YaccPragmastate = YaccPragman
		if Errflag > 0 {
			Errflag--
		}
		goto YaccPragmastack
	}

YaccPragmadefault:
	/* default state action */
	YaccPragman = YaccPragmaDef[YaccPragmastate]
	if YaccPragman == -2 {
		if YaccPragmarcvr.char < 0 {
			YaccPragmarcvr.char, YaccPragmatoken = YaccPragmalex1(YaccPragmalex, &YaccPragmarcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if YaccPragmaExca[xi+0] == -1 && YaccPragmaExca[xi+1] == YaccPragmastate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			YaccPragman = YaccPragmaExca[xi+0]
			if YaccPragman < 0 || YaccPragman == YaccPragmatoken {
				break
			}
		}
		YaccPragman = YaccPragmaExca[xi+1]
		if YaccPragman < 0 {
			goto ret0
		}
	}
	if YaccPragman == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			YaccPragmalex.Error(YaccPragmaErrorMessage(YaccPragmastate, YaccPragmatoken))
			Nerrs++
			if YaccPragmaDebug >= 1 {
				__yyfmt__.Printf("%s", YaccPragmaStatname(YaccPragmastate))
				__yyfmt__.Printf(" saw %s\n", YaccPragmaTokname(YaccPragmatoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for YaccPragmap >= 0 {
				YaccPragman = YaccPragmaPact[YaccPragmaS[YaccPragmap].yys] + YaccPragmaErrCode
				if YaccPragman >= 0 && YaccPragman < YaccPragmaLast {
					YaccPragmastate = YaccPragmaAct[YaccPragman] /* simulate a shift of "error" */
					if YaccPragmaChk[YaccPragmastate] == YaccPragmaErrCode {
						goto YaccPragmastack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if YaccPragmaDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", YaccPragmaS[YaccPragmap].yys)
				}
				YaccPragmap--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if YaccPragmaDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", YaccPragmaTokname(YaccPragmatoken))
			}
			if YaccPragmatoken == YaccPragmaEofCode {
				goto ret1
			}
			YaccPragmarcvr.char = -1
			YaccPragmatoken = -1
			goto YaccPragmanewstate /* try again in the same state */
		}
	}

	/* reduction by production YaccPragman */
	if YaccPragmaDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", YaccPragman, YaccPragmaStatname(YaccPragmastate))
	}

	YaccPragmant := YaccPragman
	YaccPragmapt := YaccPragmap
	_ = YaccPragmapt // guard against "declared and not used"

	YaccPragmap -= YaccPragmaR2[YaccPragman]
	// YaccPragmap is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if YaccPragmap+1 >= len(YaccPragmaS) {
		nyys := make([]YaccPragmaSymType, len(YaccPragmaS)*2)
		copy(nyys, YaccPragmaS)
		YaccPragmaS = nyys
	}
	YaccPragmaVAL = YaccPragmaS[YaccPragmap+1]

	/* consult goto table to find next state */
	YaccPragman = YaccPragmaR1[YaccPragman]
	YaccPragmag := YaccPragmaPgo[YaccPragman]
	YaccPragmaj := YaccPragmag + YaccPragmaS[YaccPragmap].yys + 1

	if YaccPragmaj >= YaccPragmaLast {
		YaccPragmastate = YaccPragmaAct[YaccPragmag]
	} else {
		YaccPragmastate = YaccPragmaAct[YaccPragmaj]
		if YaccPragmaChk[YaccPragmastate] != -YaccPragman {
			YaccPragmastate = YaccPragmaAct[YaccPragmag]
		}
	}
	// dummy call; replaced with literal code
	switch YaccPragmant {

	case 1:
		YaccPragmaDollar = YaccPragmaS[YaccPragmapt-4 : YaccPragmapt+1]
//line ./yaccpragma.y:30
		{
			var version yaccpragmaids.ITypeVersion = nil
			if typeVersion, ok := YaccPragmalex.(ITypeVersionReader); ok {
				var err error = nil
				version, err = typeVersion.Read(YaccPragmaDollar[4].StringLiteral)
				if err != nil {
					YaccPragmalex.Error(fmt.Sprintf("ITypeVersionReader read failure. Error: %v", err.Error()))
					return 1
				}
			} else {
				YaccPragmalex.Error("no ITypeVersionReader")
				return 1
			}

			if setPragma, ok := YaccPragmalex.(ISetPragma); ok {
				v := NewPragmaIdentifierNode(YaccPragmaDollar[3].StringLiteral, version)
				setPragma.SetPragma(v)
			}
		}
	case 2:
		YaccPragmaDollar = YaccPragmaS[YaccPragmapt-3 : YaccPragmapt+1]
//line ./yaccpragma.y:52
		{
			if setPragma, ok := YaccPragmalex.(ISetPragma); ok {
				v := NewPrefixPragmaNode(YaccPragmaDollar[3].StringLiteral)
				setPragma.SetPragma(v)
			}
		}
	case 3:
		YaccPragmaDollar = YaccPragmaS[YaccPragmapt-6 : YaccPragmapt+1]
//line ./yaccpragma.y:61
		{
			if setPragma, ok := YaccPragmalex.(ISetPragma); ok {
				v := NewPragmaVersionNode(YaccPragmaDollar[3].StringLiteral, YaccPragmaDollar[4].IntLiteral, YaccPragmaDollar[6].IntLiteral)
				setPragma.SetPragma(v)
			}
		}
	}
	goto YaccPragmastack /* stack new state and value */
}
